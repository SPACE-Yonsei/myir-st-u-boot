// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2024, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xd.dtsi"

/* USER CODE BEGIN includes */
/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mp1-v23.06.21";
	compatible = "st,stm32mp135d-altair-mx", "st,stm32mp135";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */
	/* USER CODE END root */

	clocks{

		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */
	};

}; /*root*/

&pinctrl {

	adc1_pins_mx: adc1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* ADC1_INP7 */
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ADC1_INP1 */
					 <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INN11 */
					 <STM32_PINMUX('A', 5, ANALOG)>, /* ADC1_INP2 */
					 <STM32_PINMUX('F', 11, ANALOG)>, /* ADC1_INP8 */
					 <STM32_PINMUX('F', 12, ANALOG)>, /* ADC1_INN2 */
					 <STM32_PINMUX('F', 13, ANALOG)>; /* ADC1_INP11 */
		};
	};

	adc1_sleep_pins_mx: adc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* ADC1_INP7 */
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ADC1_INP1 */
					 <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INN11 */
					 <STM32_PINMUX('A', 5, ANALOG)>, /* ADC1_INP2 */
					 <STM32_PINMUX('F', 11, ANALOG)>, /* ADC1_INP8 */
					 <STM32_PINMUX('F', 12, ANALOG)>, /* ADC1_INN2 */
					 <STM32_PINMUX('F', 13, ANALOG)>; /* ADC1_INP11 */
		};
	};

	dcmipp_pins_mx: dcmipp_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 9, AF13)>, /* DCMIPP_D0 */
					 <STM32_PINMUX('A', 12, AF13)>, /* DCMIPP_D1 */
					 <STM32_PINMUX('A', 15, AF14)>, /* DCMIPP_D5 */
					 <STM32_PINMUX('D', 12, AF13)>, /* DCMIPP_D6 */
					 <STM32_PINMUX('E', 9, AF13)>, /* DCMIPP_D7 */
					 <STM32_PINMUX('F', 4, AF13)>, /* DCMIPP_D4 */
					 <STM32_PINMUX('G', 0, AF13)>, /* DCMIPP_PIXCLK */
					 <STM32_PINMUX('G', 4, AF13)>, /* DCMIPP_D8 */
					 <STM32_PINMUX('G', 5, AF14)>, /* DCMIPP_D3 */
					 <STM32_PINMUX('G', 9, AF13)>, /* DCMIPP_VSYNC */
					 <STM32_PINMUX('H', 8, AF13)>, /* DCMIPP_HSYNC */
					 <STM32_PINMUX('H', 9, AF13)>, /* DCMIPP_D9 */
					 <STM32_PINMUX('H', 14, AF13)>; /* DCMIPP_D2 */
			bias-disable;
		};
	};

	dcmipp_sleep_pins_mx: dcmipp_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 9, ANALOG)>, /* DCMIPP_D0 */
					 <STM32_PINMUX('A', 12, ANALOG)>, /* DCMIPP_D1 */
					 <STM32_PINMUX('A', 15, ANALOG)>, /* DCMIPP_D5 */
					 <STM32_PINMUX('D', 12, ANALOG)>, /* DCMIPP_D6 */
					 <STM32_PINMUX('E', 9, ANALOG)>, /* DCMIPP_D7 */
					 <STM32_PINMUX('F', 4, ANALOG)>, /* DCMIPP_D4 */
					 <STM32_PINMUX('G', 0, ANALOG)>, /* DCMIPP_PIXCLK */
					 <STM32_PINMUX('G', 4, ANALOG)>, /* DCMIPP_D8 */
					 <STM32_PINMUX('G', 5, ANALOG)>, /* DCMIPP_D3 */
					 <STM32_PINMUX('G', 9, ANALOG)>, /* DCMIPP_VSYNC */
					 <STM32_PINMUX('H', 8, ANALOG)>, /* DCMIPP_HSYNC */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* DCMIPP_D9 */
					 <STM32_PINMUX('H', 14, ANALOG)>; /* DCMIPP_D2 */
		};
	};

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_RX_CLK */
					 <STM32_PINMUX('A', 7, AF11)>, /* ETH1_RX_CTL */
					 <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
					 <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('H', 6, AF10)>; /* ETH1_PHY_INTN */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 11, AF11)>; /* ETH1_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_CTL */
					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_GTX_CLK */
					 <STM32_PINMUX('C', 2, AF11)>, /* ETH1_TXD2 */
					 <STM32_PINMUX('E', 5, AF10)>, /* ETH1_TXD3 */
					 <STM32_PINMUX('F', 7, AF10)>, /* ETH1_CLK125 */
					 <STM32_PINMUX('G', 2, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
		pins4 {
			pinmux = <STM32_PINMUX('G', 3, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_RX_CLK */
					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_RX_CTL */
					 <STM32_PINMUX('A', 11, ANALOG)>, /* ETH1_CLK */
					 <STM32_PINMUX('B', 0, ANALOG)>, /* ETH1_RXD2 */
					 <STM32_PINMUX('B', 1, ANALOG)>, /* ETH1_RXD3 */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_CTL */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_GTX_CLK */
					 <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_TXD2 */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('E', 5, ANALOG)>, /* ETH1_TXD3 */
					 <STM32_PINMUX('F', 7, ANALOG)>, /* ETH1_CLK125 */
					 <STM32_PINMUX('G', 2, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 3, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>, /* ETH1_TXD1 */
					 <STM32_PINMUX('H', 6, ANALOG)>; /* ETH1_PHY_INTN */
		};
	};

	fdcan1_pins_mx: fdcan1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF9)>; /* FDCAN1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 10, AF9)>; /* FDCAN1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FDCAN1_RX */
					 <STM32_PINMUX('E', 10, ANALOG)>; /* FDCAN1_TX */
		};
	};

	fdcan2_pins_mx: fdcan2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 13, AF9)>; /* FDCAN2_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 5, AF9)>; /* FDCAN2_RX */
			bias-disable;
		};
	};

	fdcan2_sleep_pins_mx: fdcan2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 5, ANALOG)>, /* FDCAN2_RX */
					 <STM32_PINMUX('B', 13, ANALOG)>; /* FDCAN2_TX */
		};
	};

	i2c1_pins_mx: i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 8, AF4)>, /* I2C1_SCL */
					 <STM32_PINMUX('D', 3, AF5)>; /* I2C1_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins_mx: i2c1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 8, ANALOG)>, /* I2C1_SCL */
					 <STM32_PINMUX('D', 3, ANALOG)>; /* I2C1_SDA */
		};
	};

	i2c2_pins_mx: i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 1, AF4)>, /* I2C2_SDA */
					 <STM32_PINMUX('F', 2, AF4)>; /* I2C2_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 1, ANALOG)>, /* I2C2_SDA */
					 <STM32_PINMUX('F', 2, ANALOG)>; /* I2C2_SCL */
		};
	};

	i2c3_pins_mx: i2c3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 3, AF4)>, /* I2C3_SCL */
					 <STM32_PINMUX('H', 7, AF5)>; /* I2C3_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c3_sleep_pins_mx: i2c3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 3, ANALOG)>, /* I2C3_SCL */
					 <STM32_PINMUX('H', 7, ANALOG)>; /* I2C3_SDA */
		};
	};

	i2c4_pins_mx: i2c4_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 7, AF6)>, /* I2C4_SDA */
					 <STM32_PINMUX('E', 15, AF6)>; /* I2C4_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins_mx: i2c4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 7, ANALOG)>, /* I2C4_SDA */
					 <STM32_PINMUX('E', 15, ANALOG)>; /* I2C4_SCL */
		};
	};

	i2c5_pins_mx: i2c5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 1, AF4)>, /* I2C5_SCL */
					 <STM32_PINMUX('E', 13, AF4)>; /* I2C5_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c5_sleep_pins_mx: i2c5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 1, ANALOG)>, /* I2C5_SCL */
					 <STM32_PINMUX('E', 13, ANALOG)>; /* I2C5_SDA */
		};
	};

	rtc_pins_mx: rtc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 13, ANALOG)>, /* RTC_OUT1 */
					 <STM32_PINMUX('D', 10, AF0)>; /* RTC_REFIN */
		};
	};

	rtc_sleep_pins_mx: rtc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 13, ANALOG)>, /* RTC_OUT1 */
					 <STM32_PINMUX('D', 10, ANALOG)>; /* RTC_REFIN */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('F', 0, AF10)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('F', 0, AF10)>; /* SDMMC2_D4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('C', 6, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('F', 0, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	spi1_pins_mx: spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 4, AF5)>, /* SPI1_NSS */
					 <STM32_PINMUX('A', 6, AF5)>, /* SPI1_MISO */
					 <STM32_PINMUX('C', 0, AF6)>, /* SPI1_MOSI */
					 <STM32_PINMUX('C', 3, AF6)>; /* SPI1_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi1_sleep_pins_mx: spi1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 4, ANALOG)>, /* SPI1_NSS */
					 <STM32_PINMUX('A', 6, ANALOG)>, /* SPI1_MISO */
					 <STM32_PINMUX('C', 0, ANALOG)>, /* SPI1_MOSI */
					 <STM32_PINMUX('C', 3, ANALOG)>; /* SPI1_SCK */
		};
	};

	spi2_pins_mx: spi2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 10, AF6)>, /* SPI2_SCK */
					 <STM32_PINMUX('G', 1, AF5)>, /* SPI2_MISO */
					 <STM32_PINMUX('H', 10, AF6)>; /* SPI2_MOSI */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi2_sleep_pins_mx: spi2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 10, ANALOG)>, /* SPI2_SCK */
					 <STM32_PINMUX('G', 1, ANALOG)>, /* SPI2_MISO */
					 <STM32_PINMUX('H', 10, ANALOG)>; /* SPI2_MOSI */
		};
	};

	spi4_pins_mx: spi4_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 11, AF5)>, /* SPI4_MOSI */
					 <STM32_PINMUX('E', 12, AF5)>, /* SPI4_SCK */
					 <STM32_PINMUX('F', 3, AF5)>; /* SPI4_MISO */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi4_sleep_pins_mx: spi4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 11, ANALOG)>, /* SPI4_MOSI */
					 <STM32_PINMUX('E', 12, ANALOG)>, /* SPI4_SCK */
					 <STM32_PINMUX('F', 3, ANALOG)>; /* SPI4_MISO */
		};
	};

	spi5_pins_mx: spi5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 2, AF5)>, /* SPI5_MOSI */
					 <STM32_PINMUX('G', 8, AF5)>, /* SPI5_MISO */
					 <STM32_PINMUX('G', 10, AF5)>; /* SPI5_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi5_sleep_pins_mx: spi5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 2, ANALOG)>, /* SPI5_MOSI */
					 <STM32_PINMUX('G', 8, ANALOG)>, /* SPI5_MISO */
					 <STM32_PINMUX('G', 10, ANALOG)>; /* SPI5_SCK */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, ANALOG)>, /* UART4_TX */
					 <STM32_PINMUX('D', 8, ANALOG)>; /* UART4_RX */
		};
	};

	uart5_pins_mx: uart5_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 12, AF11)>; /* UART5_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 7, AF8)>; /* UART5_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart5_sleep_pins_mx: uart5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 12, ANALOG)>, /* UART5_RX */
					 <STM32_PINMUX('E', 7, ANALOG)>; /* UART5_TX */
		};
	};

	uart7_pins_mx: uart7_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 11, AF13)>, /* UART7_RX */
					 <STM32_PINMUX('G', 7, AF8)>; /* UART7_CTS */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 4, AF7)>, /* UART7_RTS */
					 <STM32_PINMUX('E', 8, AF7)>; /* UART7_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart7_sleep_pins_mx: uart7_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, ANALOG)>, /* UART7_RX */
					 <STM32_PINMUX('E', 4, ANALOG)>, /* UART7_RTS */
					 <STM32_PINMUX('E', 8, ANALOG)>, /* UART7_TX */
					 <STM32_PINMUX('G', 7, ANALOG)>; /* UART7_CTS */
		};
	};

	uart8_pins_mx: uart8_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 0, AF8)>; /* UART8_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 1, AF8)>; /* UART8_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart8_sleep_pins_mx: uart8_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* UART8_RX */
					 <STM32_PINMUX('E', 1, ANALOG)>; /* UART8_TX */
		};
	};

	usart2_pins_mx: usart2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 15, AF1)>; /* USART2_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('H', 12, AF1)>, /* USART2_TX */
					 <STM32_PINMUX('H', 13, AF2)>; /* USART2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart2_sleep_pins_mx: usart2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 15, ANALOG)>, /* USART2_RX */
					 <STM32_PINMUX('H', 12, ANALOG)>, /* USART2_TX */
					 <STM32_PINMUX('H', 13, ANALOG)>; /* USART2_CK */
		};
	};

	usb_otg_hs_pins_mx: usb_otg_hs_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 8, AF10)>; /* USB_OTG_HS_SOF */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};

	usb_otg_hs_sleep_pins_mx: usb_otg_hs_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* USB_OTG_HS_SOF */
					 <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&adc_1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&adc1_pins_mx>;
	pinctrl-1 = <&adc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN adc_1 */
	/* USER CODE END adc_1 */
};

&adc_2{
	status = "okay";

	/* USER CODE BEGIN adc_2 */
	/* USER CODE END adc_2 */
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&crc1{
	status = "okay";

	/* USER CODE BEGIN crc1 */
	/* USER CODE END crc1 */
};

&dcmipp{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&dcmipp_pins_mx>;
	pinctrl-1 = <&dcmipp_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN dcmipp */
	/* USER CODE END dcmipp */
};

&dmamux1{
	status = "okay";

	/* !!! log : Warning - No dma master found  !!! */

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts */
	/* USER CODE END dts */
};

&eth1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth1 */
	/* USER CODE END eth1 */
};

&hash{
	status = "okay";

	/* USER CODE BEGIN hash */
	/* USER CODE END hash */
};

&i2c1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_mx>;
	pinctrl-1 = <&i2c1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c1 */
	/* USER CODE END i2c1 */
};

&i2c2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_mx>;
	pinctrl-1 = <&i2c2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c2 */
	/* USER CODE END i2c2 */
};

&i2c3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c3_pins_mx>;
	pinctrl-1 = <&i2c3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c3 */
	/* USER CODE END i2c3 */
};

&i2c4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins_mx>;
	pinctrl-1 = <&i2c4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c4 */
	/* USER CODE END i2c4 */
};

&i2c5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins_mx>;
	pinctrl-1 = <&i2c5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c5 */
	/* USER CODE END i2c5 */
};

&iwdg2{
	status = "okay";

	/* USER CODE BEGIN iwdg2 */
	/* USER CODE END iwdg2 */
};

&m_can1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan1_pins_mx>;
	pinctrl-1 = <&fdcan1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can1 */
	/* USER CODE END m_can1 */
};

&m_can2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan2_pins_mx>;
	pinctrl-1 = <&fdcan2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can2 */
	/* USER CODE END m_can2 */
};

&mdma{
	status = "okay";

	/* USER CODE BEGIN mdma */
	/* USER CODE END mdma */
};

&rcc{
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rng{
	status = "okay";

	/* USER CODE BEGIN rng */
	/* USER CODE END rng */
};

&rtc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&rtc_pins_mx>;
	pinctrl-1 = <&rtc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN rtc */
	/* USER CODE END rtc */
};

&sdmmc1{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	/* USER CODE END sdmmc1 */
};

&sdmmc2{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	/* USER CODE END sdmmc2 */
};

&spi1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins_mx>;
	pinctrl-1 = <&spi1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi1 */
	/* USER CODE END spi1 */
};

&spi2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi2_pins_mx>;
	pinctrl-1 = <&spi2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi2 */
	/* USER CODE END spi2 */
};

&spi4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi4_pins_mx>;
	pinctrl-1 = <&spi4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi4 */
	/* USER CODE END spi4 */
};

&spi5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_mx>;
	pinctrl-1 = <&spi5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN spi5 */
	/* USER CODE END spi5 */
};

&uart4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/* USER CODE END uart4 */
};

&uart5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart5_pins_mx>;
	pinctrl-1 = <&uart5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart5 */
	/* USER CODE END uart5 */
};

&uart7{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart7_pins_mx>;
	pinctrl-1 = <&uart7_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart7 */
	/* USER CODE END uart7 */
};

&uart8{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart8_pins_mx>;
	pinctrl-1 = <&uart8_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart8 */
	/* USER CODE END uart8 */
};

&usart2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart2_pins_mx>;
	pinctrl-1 = <&usart2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart2 */
	/* USER CODE END usart2 */
};

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	/* USER CODE BEGIN usbh_ohci */
	/* USER CODE END usbh_ohci */
};

&usbotg_hs{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usb_otg_hs_pins_mx>;
	pinctrl-1 = <&usb_otg_hs_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */
/* USER CODE END addons */

